.content_block
  %h1 Hello and welcome! I’m H1, the highest-level header
  %p
    This page will (style) guide you through the most-used components we’ll have. For instance, right now, you’re in a
    %b
      paragraph HAML tag&mdash;specifically a BOLD snippet.
    You can also get the bold by
    %strong
      using the STRONG HAML.
    So, that’s rather spiffy, and neat, and we’ll probably use this lots because we’ve got lots to show our users, instructors and students alike, what GradeCraft can do!
  %p
    Let’s see what another paragraph block looks like, following our first paragraph.
    %b
      We already know what bold looks like,
      %i
        so let’s also test out how italic looks, nested within the bold.
    It looks pretty snazzy!
    %em
      And how does ITALIC on its own look like?
    Also looking rather handsome. Plus, we can nest either italics within bold or
    %i
      %strong
        bold within italics.
    We’re set up in our SASSy CSS to handle both.

  %h2 Waddup, I’m a secondary header, an H2!
  %p
    In this paragraph block, let’s explore our numeral characters. 0 1 2 3 4 5 6 7 8 9 is how they look without any other tags or styling. Proxima Nova only has tabbular, or lined, numerals.

  %h3 But what if, you use this tertiary header, or H3, and also want numeral characters 0 1 2 3 4 5 6 7 8 9?
  %p
    As you can see, Klinic Slab, the lovely serif typeface we’re using for our headings, has old style numerals by default. These are great for when you want your numbers to blend with your letterforms better. However, what if we want tabbular, or lining, figures for our numerals?

  %h3.lining_figures So here, we’ll try 0 1 2 3 4 5 6 7 8 9 with H3.lining_figures
  %p
    As you can hopefully see, now the baselines and heights of our numeric figures are aligned&mdash;there is no longer the appearance of numerals having ascenders and descenders! How magical! If you simply add the class="lining_figures" to your element, it should align your numbers for you.

  %h4 If you want to do an inline heading, use an H4
  %p
    With text underneath, in a paragraph tag, it will look like this. With text underneath, in a paragraph tag, it will look like this. With text underneath, in a paragraph tag, it will look like this.

  %h2 It’s Button Time
  %p
    So now let’s make some sample buttons, that will look like how we want and you can even click them, but they will take you nowhere.
    Let’s also examine
    %a what an inline link
    looks like, while we’re here.

  %button Standard button
  %a.button(tabindex=0) Anchor tag button
  %button.secondary Secondary button
  %button.action Call to action button
  %button(disabled) Disabled button

  %h3 We mainly use anchor tags instead of buttons,
  %p So let’s check that the styling is matching up:
  %a.button.action(tabindex=0)
    Action anchor button
  %a.button(tabindex=0)
    Anchor button
  %a.button.secondary(tabindex=0)
    Secondary anchor button
  %a.button.disabled
    Disabled anchor button

.bg-green_mint
  %h2
    Let’s try div’s with bg colors!
  %p
    We will also see how the buttons are looking on these different background colors.
  %a.button.action(tabindex=0)
    Action anchor button
  %a.button(tabindex=0)
    Anchor button
  %a.button.secondary(tabindex=0)
    Secondary anchor button
  %a.button.disabled
    Disabled anchor button

.bg-green_lime
  %h2
    Let’s try div’s with bg colors!
  %p
    We will also see how the buttons are looking on these different background colors.
  %a.button.action(tabindex=0)
    Action anchor button
  %a.button(tabindex=0)
    Anchor button
  %a.button.secondary(tabindex=0)
    Secondary anchor button
  %a.button.disabled
    Disabled anchor button

.bg-yellow
  %h2
    Let’s try div’s with bg colors!
  %p
    We will also see how the buttons are looking on these different background colors.
  %a.button.action(tabindex=0) Action anchor button
  %a.button(tabindex=0) Anchor button
  %a.button.secondary(tabindex=0) Secondary anchor button
  %a.button.disabled Disabled anchor button

.content_block
  %p
    We also have instances where our colorful divs are highlighted, or at least their headings are called out more. So now we’ll also build that and see how it looks.

.bg-green_mint.highlight
  %h2
    Highlighted Heading Right Here
  %p
    Then there’s some text chillin’ out here. Then there’s some text chillin’ out here. Then there’s some text chillin’ out here.

.content_block
  %h2 Form Elements
  %p Let’s see how our form elements are looking! Below are example inputs (type=email, and type=text) that are also unrequired and required.
  .form_elem
    %input{"type"=>"email", "id"=>"user_email", "placeholder"=>"Please enter your email", "required"=>"true"}
    %label{"for"=>"user_email"} My email address
  .form_elem
    %input{"type"=>"text", "id"=>"test_text_input", "placeholder"=>"This is a test text input"}
    %label{"for"=>"test_text_input"} Test text input
  .form_elem
    %textarea{"id"=>"test_textarea", "placeholder"=>"This is a test textarea"}
    %label{"for"=>"test_textarea"} Test textarea
  .form_elem
    %textarea{"id"=>"test_textarea_required", "placeholder"=>"This is a test textarea", "required"=>"true"}
    %label{"for"=>"test_textarea-required"} Test textarea

  %p Below is an example div.button_block, to be used if you want to distance your main call-to-action button (usually a submit, which can’t be undone) from the other buttons. (But it won’t be so on small devices, where screen real estate is diminished.)
  .button_block
    %a.button Save a draft
    %a.button.secondary Cancel
    %a.button.action Submit

.bg-yellow
  %h2 Radio buttons
  %p Single selects
  .form_options
    %input{name: "test_group_radio", type: "radio", value: "radio1", id: "test_radio_1"}
    %label{for: "test_radio_1"} Single select option 1
  .form_options
    %input{name: "test_group_radio", type: "radio", value: "radio2", id: "test_radio_2"}
    %label{for: "test_radio_2"} Single select option 2
  .form_options
    %input{name: "test_group_radio", type: "radio", value: "radio3", id: "test_radio_3"}
    %label{for: "test_radio_3"} Single select option 3
  .form_options
    %input{name: "test_group_radio1", type: "radio", value: "radio4", id: "test_radio_4", disabled: "disabled"}
    %label{for: "test_radio_4"} Disabled single select option
  .form_options
    %input{name: "test_group_radio1", type: "radio", value: "radio5", id: "test_radio_5", disabled: "disabled", checked: "checked"}
    %label{for: "test_radio_5"} Disabled &amp; checked single select option

  %h2 Checkbox buttons
  %p Multiple selects
  .form_options
    %input{name: "test_group_checkbox", type: "checkbox", value: "checkbox1", id: "test_checkbox_1"}
    %label{for: "test_checkbox_1"} Multiple select option 1
  .form_options
    %input{name: "test_group_checkbox", type: "checkbox", value: "checkbox2", id: "test_checkbox_2"}
    %label{for: "test_checkbox_2"} Multiple select option 2
  .form_options
    %input{name: "test_group_checkbox", type: "checkbox", value: "checkbox3", id: "test_checkbox_3"}
    %label{for: "test_checkbox_3"} Multiple select option 3
  .form_options
    %input{name: "test_group_checkbox1", type: "checkbox", value: "checkbox4", id: "test_checkbox_4", disabled: "disabled"}
    %label{for: "test_checkbox_4"} Disabled multiple select option
  .form_options
    %input{name: "test_group_checkbox1", type: "checkbox", value: "checkbox5", id: "test_checkbox_5", disabled: "disabled", checked: "checked"}
    %label{for: "test_checkbox_5"} Disabled &amp; checked multiple select option

.content_block
  %p This is a simple form helper output for a checkbox:
  = simple_form_for User.new do |f|
    -# = f.input :first_name, label: false
    -# = f.label :first_name, :label => "FIRST NAMEEEEEEEEE"
    -# = f.input :last_name
    = f.input :admin, type: "checkbox", wrapper_html: { class: "form_options" }
